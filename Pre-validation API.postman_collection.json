{
	"info": {
		"_postman_id": "c70bb211-b226-4a66-b136-d1e897a9b9bd",
		"name": "Pre-validation API",
		"description": "Move your app forward with the gpi APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "SCENARIO-ERRORS",
					"item": [
						{
							"name": "scenario_not_allowed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f9a1f0eb-4199-4c94-b0e8-4766e9bcbf92",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c1f48cc7-e2f7-47b0-ba2c-31a797d9a96c",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"scenario_not_allowed\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "scenario_no_integration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a824db92-db3c-4775-a0f8-7c58f7104108",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2132e6b6-6206-46c7-83c8-28acb1841b91",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"scenario_no_integration\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "scenario_bad_request_400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4915194f-83f7-4e49-9b04-8e33fe4804f7",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d1ef1478-9c88-4a9c-b9b9-6826f613a543",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"scenario_bad_request_400\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "scenario_invalid_token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d3440ef6-3f16-4505-ac8d-ee49d4c4ed6b",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8015b69d-d370-44c8-9396-0680fb354064",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"scenario_invalid_token\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "scenario_bad_request_401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "202ed1a1-1637-4af0-9e1f-c54abb39b875",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ae01042-3f6a-4ecf-843a-68da1be255a0",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"scenario_bad_request_401\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "scenario_insufficient_scope",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0a4b91d8-72f0-4687-854f-a3f5387e0f52",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ee25858-edf4-40c7-8480-51bdc852a3ce",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"scenario_insufficient_scope\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "scenario_service_not_provisioned",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26d1a63c-4649-45e4-a4e8-7372e1e258cf",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9e679ed8-5bff-436c-ac5b-8582affbe1c3",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"scenario_service_not_provisioned\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "errorcode_404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc538c51-541d-4236-be6e-417567d6f7b3",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f880f25-0206-43aa-8889-1d9042881e2a",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"errorcode_404\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "errorcode_429",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "77202068-ac1d-4c21-b813-2189efa2fe03",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db3d62e8-aadb-4251-8f6c-35b4a8dbd0d9",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 429\", function () {",
											"    pm.response.to.have.status(429);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"errorcode_429\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "errorcode_500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e6f5df09-5de9-46be-a013-0c0dfa06ed6b",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "11b946da-4c3a-4b79-b08e-4549402946af",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"errorcode_500\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "errorcode_502",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "12b32a9d-00b1-427a-975f-8a603b56991c",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2d2d1fc8-3f19-428c-83a3-910e849b6197",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 502\", function () {",
											"    pm.response.to.have.status(502);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"errorcode_502\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "errorcode_503",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b512b787-e4a8-43e4-b71f-1a63668048a8",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0d2791ec-6e27-4475-ad5b-9560639b60c9",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 503\", function () {",
											"    pm.response.to.have.status(503);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"errorcode_503\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						},
						{
							"name": "errorcode_504",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3df77b68-a3a0-4d61-8055-ba3d20785f95",
										"exec": [
											"pm.test(\"The API request is compliant to the JSON schema\", function () {",
											"",
											"    // Load the JSON Schema",
											"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
											"    ",
											"    // Test whether the request matches the schema",
											"    var _request = JSON.parse(request.data);",
											"",
											"    var result = tv4.validateMultiple(_request, schema);",
											"    ",
											"    // Iterate overall all errors if any",
											"    if(result.valid === false) {",
											"        console.log(\"JSON schema errors:\");",
											"        result.errors.forEach(function(error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"    pm.expect(result.valid).to.be.equal(true);",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ed6c9fbe-c3a6-4a51-a369-4bf056cfe8e0",
										"exec": [
											"pm.test(\"Response content-type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response status code is 504\", function () {",
											"    pm.response.to.have.status(504);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "LAUApplicationID",
										"type": "text",
										"value": "{{applicationId}}"
									},
									{
										"key": "LAUVersion",
										"type": "text",
										"value": "{{version}}"
									},
									{
										"key": "LAUCallTime",
										"type": "text",
										"value": "{{callTime}}"
									},
									{
										"key": "LAURequestNonce",
										"type": "text",
										"value": "{{requestNonce}}"
									},
									{
										"key": "LAUSigned",
										"type": "text",
										"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
									},
									{
										"key": "LAUSignature",
										"type": "text",
										"value": "{{signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"correlation_identifier\":\"errorcode_504\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
								},
								"url": {
									"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
									"protocol": "https",
									"host": [
										"sandbox",
										"swift",
										"com"
									],
									"path": [
										"swift-preval-pilot",
										"v1",
										"accounts",
										"verification"
									]
								},
								"description": "Beneficiary account pre-validation."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a75c8f1-aa52-4f37-886a-e012f1896722",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ffd1d8df-5f0f-4f4c-aa85-7e8cf0cbf2a3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SCENARIO1-CORRID-001",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a48b5bed-5eee-469a-b799-f5c400ea25eb",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7c56fd4e-2729-4ab6-af9e-64e06a4760d7",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO1-CORRID-001\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO1-CORRID-002",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b83037fb-2e93-477e-a837-db12dcdd0120",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa894085-67a4-421a-bc37-309c12d72e1d",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "LAUApplicationID",
								"type": "text",
								"value": "{{applicationId}}"
							},
							{
								"key": "LAUVersion",
								"type": "text",
								"value": "{{version}}"
							},
							{
								"key": "LAUCallTime",
								"type": "text",
								"value": "{{callTime}}"
							},
							{
								"key": "LAURequestNonce",
								"type": "text",
								"value": "{{requestNonce}}"
							},
							{
								"key": "LAUSigned",
								"type": "text",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
							},
							{
								"key": "LAUSignature",
								"type": "text",
								"value": "{{signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO1-CORRID-002\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO1-CORRID-003",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "abdf8f31-906e-4d26-8aa9-ade26321743d",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "08dc2ddd-b28d-4e40-bfab-c36770e2bb86",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO1-CORRID-003\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO1-CORRID-004",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e967c59f-60bf-46e1-9933-ac9379b08db5",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc30224f-6ead-4b22-b338-4d3c35c383a6",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO1-CORRID-004\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO1-CORRID-005",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b7e53b6-2873-4d91-83a6-c602cd84b7e3",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32226941-2244-4c38-b11a-50d0a6ab9878",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "LAUApplicationID",
								"type": "text",
								"value": "{{applicationId}}"
							},
							{
								"key": "LAUVersion",
								"type": "text",
								"value": "{{version}}"
							},
							{
								"key": "LAUCallTime",
								"type": "text",
								"value": "{{callTime}}"
							},
							{
								"key": "LAURequestNonce",
								"type": "text",
								"value": "{{requestNonce}}"
							},
							{
								"key": "LAUSigned",
								"type": "text",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
							},
							{
								"key": "LAUSignature",
								"type": "text",
								"value": "{{signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO1-CORRID-005\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO1-CORRID-006",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de6e1e23-c110-49c2-8f79-92dc8e1d96c5",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a508005-688e-4929-9b46-1a092578251a",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO1-CORRID-006\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO2-CORRID-001",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "464e0474-79f2-47da-9b7a-dc51047f700e",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d2dec1-5f08-4078-95d9-2119b2520562",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO2-CORRID-001\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO2-CORRID-002",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a6672fa7-3be3-48d4-a5b5-0b1c6a29ed21",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e71a3cc2-617c-4636-bd79-f2976dafb8b5",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO2-CORRID-001\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO2-CORRID-003",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69ddaf1f-1110-4efa-b365-e697b12457b5",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a203cf62-8bf5-40c7-ad8d-2ca30fd2ab13",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO2-CORRID-003\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO2-CORRID-004",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "91631e51-885c-4591-838f-6e0fed04fc5f",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "67440472-d896-4b5a-8893-c42a35bb2401",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO2-CORRID-004\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO2-CORRID-005",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e5f8eaa-b3bc-4a02-85a8-e9e8937abdc8",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6248d2a5-9b42-40d6-94bd-9482c123d524",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO2-CORRID-005\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO2-CORRID-006",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "433ea676-464c-42d2-9d25-df8d0866d454",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fcd5d599-45b2-4c49-8fa6-e094d048a1a1",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO2-CORRID-006\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO3-CORRID-001",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e59a84f-b8e5-48c6-805d-3298520b86cf",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54b315ca-b9c1-4eac-9188-04a49dfc75a8",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO3-CORRID-001\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO3-CORRID-002",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11fc52c2-05c5-4614-9578-f5583a25e464",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9536caf6-078d-439a-8baf-4e36bf657e06",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO3-CORRID-002\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO3-CORRID-003",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3547c5ba-e391-4c12-8dd7-750578d0fe04",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51a4d1b4-3c5e-4d9c-b68b-ec0fe23bd04e",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO3-CORRID-003\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO3-CORRID-004",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbbd5d82-fd1b-47ce-8370-1314f262674a",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9a19fd10-ebd2-4dca-a219-7c519232563b",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO3-CORRID-004\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO3-CORRID-005",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81a35c63-3f6d-4e9b-a01f-5df35227d197",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8920894-7b78-44cf-a4f1-77db59e8e8cf",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO3-CORRID-005\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO3-CORRID-006",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc9844b1-3af3-46b0-8bb9-0beceee8ac19",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7f62705a-ee26-4acc-8d10-d6beb59e680b",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO3-CORRID-006\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO4-CORRID-001",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24e673fc-23ce-4800-8ebf-10da47532a2a",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a09e5a3e-ee06-406f-9122-efb61fb31d34",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO4-CORRID-001\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO4-CORRID-002",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b68489f6-4a1c-436b-88ea-c79fa7c50e44",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "726cb723-3716-46e1-8010-3c2343394ea5",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO4-CORRID-002\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO4-CORRID-003",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5fc1690b-1d3a-44b3-acf2-8f1899756e10",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0c073e34-6736-4ecd-9dd7-9a3a49e8d0e9",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO4-CORRID-003\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO4-CORRID-004",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fe13492-3c1a-48b3-881a-8dc0db52dc63",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f46666e-b597-472f-beee-30f9c1a8b4c5",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO4-CORRID-004\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO4-CORRID-005",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6918384-4f6a-4517-90fc-d1080e8f2248",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f5ae2f2-a732-4f9d-aa61-1c33e347f6e6",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO4-CORRID-005\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO4-CORRID-006",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "27211a48-c4a3-43a4-9a61-0a97f4ecd503",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce60c9cd-ce9d-4b3c-89dc-26c0a9c7cf0f",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "LAUApplicationID",
								"value": "{{applicationId}}",
								"type": "text"
							},
							{
								"key": "LAUVersion",
								"value": "{{version}}",
								"type": "text"
							},
							{
								"key": "LAUCallTime",
								"value": "{{callTime}}",
								"type": "text"
							},
							{
								"key": "LAURequestNonce",
								"value": "{{requestNonce}}",
								"type": "text"
							},
							{
								"key": "LAUSigned",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))",
								"type": "text"
							},
							{
								"key": "LAUSignature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n   \"correlation_identifier\":\"SCENARIO4-CORRID-006\",\n   \"context\":\"BENR\",\n   \"uetr\":\"b916a97d-a699-4f20-b8c2-2b07e2684a27\",\n   \"creditor_account\":\"GB3112000000001987426375\",\n   \"creditor_name\":\"John Doe\",\n   \"creditor_address\":{  \n      \"country\":\"GB\"\n   },\n   \"creditor_organisation_identification\":{  \n      \"any_bic\":\"BANABEBB\"\n   }\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				},
				{
					"name": "SCENARIO-PLAYGROUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "347e580a-18a9-4962-87a8-c95d18958e53",
								"exec": [
									"pm.test(\"The API request is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationRequest\"));",
									"    ",
									"    // Test whether the request matches the schema",
									"    var _request = JSON.parse(request.data);",
									"",
									"    var result = tv4.validateMultiple(_request, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5720f970-48d0-43a3-ae14-9ce52b9eaf7c",
								"exec": [
									"pm.test(\"Response content-type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"The API response is compliant to the JSON schema\", function () {",
									"",
									"    // Load the JSON Schema",
									"    var schema = JSON.parse(pm.variables.get(\"AccountVerificationResponse\"));",
									"    ",
									"    // Test whether the response matches the schema",
									"    var _response = JSON.parse(responseBody);",
									"    ",
									"    var result = tv4.validateMultiple(_response, schema);",
									"    ",
									"    // Iterate overall all errors if any",
									"    if(result.valid === false) {",
									"        console.log(\"JSON schema errors:\");",
									"        result.errors.forEach(function(error) {",
									"            console.log(error);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "LAUApplicationID",
								"type": "text",
								"value": "{{applicationId}}"
							},
							{
								"key": "LAUVersion",
								"type": "text",
								"value": "{{version}}"
							},
							{
								"key": "LAUCallTime",
								"type": "text",
								"value": "{{callTime}}"
							},
							{
								"key": "LAURequestNonce",
								"type": "text",
								"value": "{{requestNonce}}"
							},
							{
								"key": "LAUSigned",
								"type": "text",
								"value": "(ApplAPIKey=yVGhKiV5z1ZGdaqFXoZ8AiSA9n5CrY6B),(RBACRole=[FullViewer/Scope/BANABEBB],(x-bic=cclabeb0))"
							},
							{
								"key": "LAUSignature",
								"type": "text",
								"value": "{{signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \n\t\"correlation_identifier\": \"SCENARIO-PLAYGROUND\",\n\t\"context\": \"BENR\",\n\t\"uetr\": \"fb5f3ada-5eb3-49a9-b69c-409b9d322532\",\n\t\"creditor_account\": \"PL94123110040000109876543210\",\n\t\"creditor_name\": \"Optimal Export\",\n\t\"creditor_organisation_identification\": {\n\t\t\"any_bic\": \"BWWLPLPW\"\n\t}\n}"
						},
						"url": {
							"raw": "https://sandbox.swift.com/swift-preval-pilot/v1/accounts/verification",
							"protocol": "https",
							"host": [
								"sandbox",
								"swift",
								"com"
							],
							"path": [
								"swift-preval-pilot",
								"v1",
								"accounts",
								"verification"
							]
						},
						"description": "Beneficiary account pre-validation."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d4835be4-2e4b-4545-bdf5-7faab60355a2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3f5b258f-e55a-4ad7-a1ef-c61ab1c7a43a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{consumer-key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c7e03b78-0bce-46fd-bcdf-d7efaef40675",
				"type": "text/javascript",
				"exec": [
					"// Declare packages required",
					"const uuid = require(\"uuid\");",
					"const url = require('url');",
					"const crypto = require(\"crypto-js\");",
					"",
					"// Dynamically set LAUCallTime",
					"var callTime = new Date();",
					"pm.globals.set(\"callTime\", callTime);",
					"// Dynamically set LAURequestNonce",
					"var requestNonce = uuid.v4();",
					"pm.globals.set(\"requestNonce\", requestNonce);",
					"",
					"",
					"// Calculate signature",
					"",
					"const CRLF = \"\\r\\n\";",
					"var applicationId = pm.variables.get(\"applicationId\"); ",
					"var signed = pm.request.headers.get(\"LAUSigned\");",
					"var version = pm.variables.get(\"version\");",
					"var absPath = url.parse(request.url, true).pathname;",
					"var requestBody = request.data;",
					"",
					"var sb = \"\";",
					"sb += \"LAUApplicationID:\";",
					"sb += applicationId.trim();",
					"sb += CRLF;",
					"sb += \"LAUCallTime:\";",
					"sb += callTime.toISOString().trim();",
					"sb += CRLF;",
					"sb += \"LAURequestNonce:\";",
					"sb += requestNonce.trim();",
					"sb += CRLF;",
					"sb += \"LAUSigned:\";",
					"sb += signed.trim();",
					"sb += CRLF;",
					"sb += \"LAUVersion:\";",
					"sb += version.trim();",
					"sb += CRLF;",
					"sb += absPath.trim();",
					"sb += CRLF;",
					"sb += requestBody;",
					"",
					"// Calculate HMAC-SHA256 signature",
					"var signature = crypto.HmacSHA256(sb, pm.variables.get(\"lauKey\"));",
					"signature.sigBytes = 16;",
					"var signatureCalculated = crypto.enc.Base64.stringify(signature);",
					"console.log(\"LAUSignature calculated for the API request:\", signatureCalculated);",
					"",
					"// Set calculated signature",
					"pm.globals.set(\"signature\", signatureCalculated);",
					"",
					"",
					"pm.test(\"LAUApplicationID is present in the API request\", function () {",
					"    pm.request.to.have.header(\"LAUApplicationID\");",
					"});",
					"",
					"pm.test(\"LAUVersion is present in the API request\", function () {",
					"    pm.request.to.have.header(\"LAUVersion\");",
					"});",
					"",
					"pm.test(\"LAUCallTime is present in the API request\", function () {",
					"    pm.request.to.have.header(\"LAUCallTime\");",
					"});",
					"",
					"pm.test(\"LAURequestNonce is present in the API request\", function () {",
					"    pm.request.to.have.header(\"LAURequestNonce\");",
					"});",
					"",
					"pm.test(\"LAUSigned is present in the API request\", function () {",
					"    pm.request.to.have.header(\"LAUSigned\");",
					"});",
					"",
					"pm.test(\"LAUSignature is present in the API request\", function () {",
					"    pm.request.to.have.header(\"LAUSignature\");",
					"});",
					"",
					"// Add HTTP header: x-bic",
					"var signed = pm.request.headers.get(\"LAUSigned\");",
					"var xbic = signed.match(/x-bic=([a-z]{6,6}[a-z2-9][a-np-z0-9])/)[1];",
					"console.log(\"x-bic in LAUSigned:\", xbic);",
					"pm.request.headers.add({",
					"    'key': \"x-bic\",",
					"    'value': xbic   ",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fd5387cd-1e6c-4f8a-a215-4df6e7d73db3",
				"type": "text/javascript",
				"exec": [
					"// Declare packages required",
					"const crypto = require(\"crypto-js\");",
					"",
					"",
					"// Verify signature if LAURequestNounce is not null",
					"console.log(\"LAUResponseNonce received from the API response:\", pm.response.headers.get(\"LAUResponseNonce\"));",
					"",
					"if (pm.response.headers.get(\"LAUResponseNonce\") != null) {",
					"    ",
					"    pm.test(\"API response signature is valid\", function () {",
					"    const CRLF = \"\\r\\n\";",
					"    var applicationId = pm.response.headers.get(\"LAUApplicationID\");",
					"    var callTime = pm.response.headers.get(\"LAUCallTime\");",
					"    var requestNonce = pm.response.headers.get(\"LAURequestNonce\");",
					"    var responseNonce = pm.response.headers.get(\"LAUResponseNonce\");",
					"    var version = pm.response.headers.get(\"LAUVersion\");",
					"    var signatureReceived = pm.response.headers.get(\"LAUSignature\");",
					"    console.log(\"LAUSignature received from the API response:\", signatureReceived);",
					"    ",
					"    if(typeof(applicationId) !== \"undefined\" &&",
					"        typeof(callTime) !== \"undefined\" &&",
					"        typeof(requestNonce) !== \"undefined\" &&",
					"        typeof(responseNonce) !== \"undefined\" &&",
					"        typeof(version) !== \"undefined\" &&",
					"        typeof(signatureReceived) !== \"undefined\") {",
					"    ",
					"        var sb = \"\";",
					"        sb += \"LAUApplicationID:\";",
					"        sb += applicationId.trim();",
					"        sb += CRLF;",
					"        sb += \"LAUCallTime:\";",
					"        sb += callTime.trim();",
					"        sb += CRLF;",
					"        sb += \"LAURequestNonce:\";",
					"        sb += requestNonce.trim();",
					"        sb += CRLF;",
					"        sb += \"LAUResponseNonce:\";",
					"        sb += responseNonce.trim();",
					"        sb += CRLF;",
					"        sb += \"LAUVersion:\";",
					"        sb += version.trim();",
					"        sb += CRLF;",
					"        sb += responseBody;",
					"    ",
					"        // Calculate HMAC-SHA256 signature",
					"        var signature = crypto.HmacSHA256(sb, pm.variables.get(\"lauKey\"));",
					"        signature.sigBytes = 16;",
					"        var signatureRecalculated = crypto.enc.Base64.stringify(signature);",
					"        console.log(\"LAUSignature calculated for the API response:\", signatureRecalculated);",
					"        ",
					"        pm.expect(signatureReceived).to.be.equal(signatureRecalculated);",
					"    } else {",
					"        pm.expect(false).to.be.equal(true);",
					"    }",
					"});",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"id": "3967d070-bc8b-46f4-b633-e9f63e7c514a",
			"key": "applicationId",
			"value": "001"
		},
		{
			"id": "dcc9ae0e-f9e2-40c2-9363-57c5602f1738",
			"key": "version",
			"value": "1.0"
		},
		{
			"id": "aaa99a69-acce-4ea4-b61f-fc55091e902e",
			"key": "lauKey",
			"value": "Abcd1234Abcd1234Abcd1234Abcd1234"
		},
		{
			"id": "ecef0259-3c75-407d-b0ff-5a0611e0d233",
			"key": "AccountVerificationRequest",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"description\": \"Beneficiary account verification request.\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"correlation_identifier\": {\n      \"description\": \"Identifier of the request, assigned by the sender of the request. It will allow the requestor to correlate the request and the response.\",\n      \"$ref\": \"#/definitions/Max50Text\"\n    },\n    \"context\": {\n      \"description\": \"Context in which this transaction is performed.\",\n      \"$ref\": \"#/definitions/AccountValidationCheckContext1Code\"\n    },\n    \"uetr\": {\n      \"description\": \"UETR of the transaction that is going to be sent to this account.\",\n      \"$ref\": \"#/definitions/UUIDv4Identifier\"\n    },\n    \"creditor_account\": {\n      \"description\": \"Identifies the account targeted by the transaction.\",\n      \"$ref\": \"#/definitions/Max34Text\"\n    },\n    \"creditor_name\": {\n      \"description\": \"Name by which the creditor is known.\",\n      \"$ref\": \"#/definitions/Max140Text\"\n    },\n    \"creditor_address\": {\n      \"description\": \"Information that locates and identifies the address of the creditor, as defined by postal services.\",\n      \"$ref\": \"#/definitions/PostalAddress26\"\n    },\n    \"creditor_organisation_identification\": {\n      \"description\": \"Unique and unambiguous way to identify a creditor.\",\n      \"$ref\": \"#/definitions/OrganisationIdentification8\"\n    },\n    \"creditor_agent\": {\n      \"description\": \"Financial institution servicing an account for the creditor.\",\n      \"$ref\": \"#/definitions/FinancialInstitutionIdentification20\"\n    },\n    \"creditor_agent_branch_identification\": {\n      \"description\": \"Identifies a specific branch of the creditor.\",\n      \"$ref\": \"#/definitions/Max35Text\"\n    }\n  },\n  \"required\": [\n    \"context\",\n    \"creditor_account\",\n    \"creditor_name\"\n  ],\n  \"definitions\": {\n    \"PostalAddress26\": {\n      \"type\": \"object\",\n      \"description\": \"Information that locates and identifies a specific address, as defined by postal services.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"country\": {\n          \"description\": \"Nation with its own government.\",\n          \"$ref\": \"#/definitions/CountryCode\"\n        },\n        \"address_line\": {\n          \"type\": \"array\",\n          \"maxItems\": 7,\n          \"description\": \"Information that locates and identifies a specific address, as defined by postal services, presented in free format text.\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Max70Text\"\n          }\n        },\n        \"post_code\": {\n          \"description\": \"Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.\",\n          \"$ref\": \"#/definitions/Max16Text\"\n        },\n        \"town_name\": {\n          \"description\": \"Name of a built-up area, with defined boundaries, and a local government.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      }\n    },\n    \"UUIDv4Identifier\": {\n      \"type\": \"string\",\n      \"description\": \"Universally Unique IDentifier (UUID) version 4, as described in IETC RFC 4122 \\\"Universally Unique IDentifier (UUID) URN Namespace\\\".\",\n      \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}$\"\n    },\n    \"GenericOrganisationIdentification1\": {\n      \"type\": \"object\",\n      \"description\": \"Information related to an identification of an organisation.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"identification\": {\n          \"description\": \"Identification assigned by an institution.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        },\n        \"scheme_name\": {\n          \"description\": \"Name of the identification scheme.\",\n          \"$ref\": \"#/definitions/OrganisationIdentificationSchemeName1Choice\"\n        },\n        \"issuer\": {\n          \"description\": \"Entity that assigns the identification.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      },\n      \"required\": [\n        \"identification\"\n      ]\n    },\n    \"AccountValidationCheckContext1Code\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"BENR\",\n        \"PAYM\",\n        \"RFPP\"\n      ]\n    },\n    \"ExternalClearingSystemIdentification1Code\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies the clearing system identification code, as published in an external clearing system identification code list.\\r\\nExternal code sets can be downloaded from www.iso20022.org.\"\n    },\n    \"ExternalOrganisationIdentification1Code\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies the external organisation identification scheme name code in the format of character string with a maximum length of 4 characters.\\r\\nThe list of valid codes is an external code list published separately.\\r\\nExternal code sets can be downloaded from www.iso20022.org.\"\n    },\n    \"AnyBICIdentifier\": {\n      \"type\": \"string\",\n      \"description\": \"Code allocated to a financial or non-financial institution by the ISO 9362 Registration Authority, as described in ISO 9362 \\\"Banking - Banking telecommunication messages - Business identifier code (BIC)\\\".\",\n      \"pattern\": \"^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$\"\n    },\n    \"Max70Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 70characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 70\n    },\n    \"AccountValidationResponse1Code\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"NOTC\",\n        \"NOAP\",\n        \"NMTC\",\n        \"MTCH\"\n      ]\n    },\n    \"AccountValidationResponse2Code\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"NMTC\",\n        \"MTCH\"\n      ]\n    },\n    \"AccountValidationResponse3Code\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"PASS\",\n        \"INCO\",\n        \"FAIL\"\n      ]\n    },\n    \"ValidationCheckReponse1\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"account_validation_status\": {\n          \"description\": \"Overall status of the account verification.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse3Code\"\n        },\n        \"creditor_account_match\": {\n          \"description\": \"Whether an account was found in the banks books identified by the provided creditor account identification (number) that can receive incoming funds.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse2Code\"\n        },\n        \"creditor_name_match\": {\n          \"description\": \"Result of matching the provided creditor name with the account holder name. The matching logic used must follow the same rules as the ones that would be apply when the transaction will be processed.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse1Code\"\n        },\n        \"creditor_address_match\": {\n          \"description\": \"Result of matching the provided creditor address with the account holder address. The matching logic used must follow the same rules as the ones that would be apply when the transaction will be processed.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse1Code\"\n        },\n        \"creditor_organisation_identification_match\": {\n          \"description\": \"Result of matching the provided creditor organization identification with the account holder name. The matching logic used must follow the same rules as the ones that would be apply when the transaction will be processed.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse1Code\"\n        }\n      },\n      \"required\": [\n        \"account_validation_status\",\n        \"creditor_name_match\",\n        \"creditor_address_match\",\n        \"creditor_organisation_identification_match\"\n      ]\n    },\n    \"ClearingSystemMemberIdentification2\": {\n      \"type\": \"object\",\n      \"description\": \"Unique identification, as assigned by a clearing system, to unambiguously identify a member of the clearing system.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"clearing_system_identification\": {\n          \"description\": \"Specification of a pre-agreed offering between clearing agents or the channel through which the payment instruction is processed.\",\n          \"$ref\": \"#/definitions/ClearingSystemIdentification2Choice\"\n        },\n        \"member_identification\": {\n          \"description\": \"Identification of a member of a clearing system.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      },\n      \"required\": [\n        \"member_identification\"\n      ]\n    },\n    \"FinancialInstitutionIdentification20\": {\n      \"type\": \"object\",\n      \"description\": \"Set of elements used to identify a financial institution.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"bicfi\": {\n          \"description\": \"Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 \\\"Banking - Banking telecommunication messages - Business identifier code (BIC)\\\".\",\n          \"$ref\": \"#/definitions/BICFIIdentifier\"\n        },\n        \"clearing_system_member_identification\": {\n          \"description\": \"Information used to identify a member within a clearing system.\",\n          \"$ref\": \"#/definitions/ClearingSystemMemberIdentification2\"\n        }\n      }\n    },\n    \"BICFIIdentifier\": {\n      \"type\": \"string\",\n      \"description\": \"Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 \\\"Banking - Banking telecommunication messages - Business identifier code (BIC)\\\".\",\n      \"pattern\": \"^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$\"\n    },\n    \"CountryCode\": {\n      \"type\": \"string\",\n      \"description\": \"Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).\",\n      \"pattern\": \"^[A-Z]{2,2}$\"\n    },\n    \"Max140Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 140 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 140\n    },\n    \"Max35Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 35 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 35\n    },\n    \"Max16Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 16 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 16\n    },\n    \"ClearingSystemIdentification2Choice\": {\n      \"type\": \"object\",\n      \"description\": \"Choice of a clearing system identifier.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"code\": {\n          \"description\": \"Identification of a clearing system, in a coded form as published in an external list.\",\n          \"$ref\": \"#/definitions/ExternalClearingSystemIdentification1Code\"\n        },\n        \"proprietary\": {\n          \"description\": \"Identification code for a clearing system, that has not yet been identified in the list of clearing systems.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      },\n      \"maxProperties\": 1,\n      \"minProperties\": 1\n    },\n    \"Max34Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 34 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 34\n    },\n    \"OrganisationIdentification8\": {\n      \"type\": \"object\",\n      \"description\": \"Unique and unambiguous way to identify an organisation.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"any_bic\": {\n          \"description\": \"Code allocated to a financial institution or non financial institution by the ISO 9362 Registration Authority as described in ISO 9362 \\\"Banking - Banking telecommunication messages - Business identifier code (BIC)\\\".\",\n          \"$ref\": \"#/definitions/AnyBICIdentifier\"\n        },\n        \"other\": {\n          \"type\": \"array\",\n          \"description\": \"Unique identification of an organisation, as assigned by an institution, using an identification scheme.\",\n          \"items\": {\n            \"$ref\": \"#/definitions/GenericOrganisationIdentification1\"\n          }\n        }\n      }\n    },\n    \"OrganisationIdentificationSchemeName1Choice\": {\n      \"type\": \"object\",\n      \"description\": \"Sets of elements to identify a name of the organisation identification scheme.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"code\": {\n          \"description\": \"Name of the identification scheme, in a coded form as published in an external list.\",\n          \"$ref\": \"#/definitions/ExternalOrganisationIdentification1Code\"\n        },\n        \"proprietary\": {\n          \"description\": \"Name of the identification scheme, in a free text form.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      },\n      \"maxProperties\": 1,\n      \"minProperties\": 1\n    },\n    \"Max50Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 50 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 50\n    },\n    \"ErrorCodeConsumer\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"status\"\n      ],\n      \"properties\": {\n        \"status\": {\n          \"$ref\": \"#/definitions/StatusCodeConnector\"\n        }\n      }\n    },\n    \"StatusCodeConnector\": {\n      \"required\": [\n        \"code\",\n        \"severity\",\n        \"text\"\n      ],\n      \"properties\": {\n        \"severity\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"Fatal\",\n            \"Transient\"\n          ]\n        },\n        \"code\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"SwAP001\",\n            \"SwAP002\",\n            \"SwAP003\",\n            \"SwAP005\",\n            \"SwAP006\",\n            \"SwAP007\",\n            \"SwAP008\",\n            \"SwAP010\",\n            \"SwAP009\",\n            \"SwAP011\",\n            \"SwAP099\",\n            \"SwAP090\",\n            \"SwAP501\",\n            \"SwAP504\",\n            \"SwAP506\",\n            \"SwAP507\",\n            \"SwAP521\",\n            \"SwAP522\",\n            \"SwAP590\",\n            \"SwAP591\",\n            \"SwAPProxy001\",\n            \"SwAPProxy002\",\n            \"SwAPProxy003\",\n            \"SwAPProxy004\",\n            \"SwAPProxy005\",\n            \"SwAPProxy006\",\n            \"SwAPProxy007\",\n            \"SwAPProxy008\",\n            \"CANT\",\n            \"UNAV\",\n            \"InvalidRequest\",\n            \"MandatoryFieldMissing\",\n            \"MyInstitutionAuthorizationFailure\",\n            \"FromAuthorizationFailure\",\n            \"NoResultFound\",\n            \"UnknownTransaction\",\n            \"InvalidRBACRole\",\n            \"InternalError\"\n          ]\n        },\n        \"text\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n"
		},
		{
			"id": "1d638aaf-b818-47aa-b8aa-a80e68b13147",
			"key": "AccountVerificationResponse",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"correlation_identifier\": {\n      \"description\": \"Identifier of the request, assigned by the sender of the request. It will allow the requestor to correlate the request and the response.\",\n      \"$ref\": \"#/definitions/Max50Text\"\n    },\n    \"response\": {\n      \"description\": \"Provides the response to the account verification request.\",\n      \"$ref\": \"#/definitions/ValidationCheckReponse1\"\n    }\n  },\n  \"required\": [\n    \"response\"\n  ],\n  \"definitions\": {\n    \"PostalAddress26\": {\n      \"type\": \"object\",\n      \"description\": \"Information that locates and identifies a specific address, as defined by postal services.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"country\": {\n          \"description\": \"Nation with its own government.\",\n          \"$ref\": \"#/definitions/CountryCode\"\n        },\n        \"address_line\": {\n          \"type\": \"array\",\n          \"maxItems\": 7,\n          \"description\": \"Information that locates and identifies a specific address, as defined by postal services, presented in free format text.\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Max70Text\"\n          }\n        },\n        \"post_code\": {\n          \"description\": \"Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.\",\n          \"$ref\": \"#/definitions/Max16Text\"\n        },\n        \"town_name\": {\n          \"description\": \"Name of a built-up area, with defined boundaries, and a local government.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      }\n    },\n    \"UUIDv4Identifier\": {\n      \"type\": \"string\",\n      \"description\": \"Universally Unique IDentifier (UUID) version 4, as described in IETC RFC 4122 \\\"Universally Unique IDentifier (UUID) URN Namespace\\\".\",\n      \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}$\"\n    },\n    \"GenericOrganisationIdentification1\": {\n      \"type\": \"object\",\n      \"description\": \"Information related to an identification of an organisation.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"identification\": {\n          \"description\": \"Identification assigned by an institution.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        },\n        \"scheme_name\": {\n          \"description\": \"Name of the identification scheme.\",\n          \"$ref\": \"#/definitions/OrganisationIdentificationSchemeName1Choice\"\n        },\n        \"issuer\": {\n          \"description\": \"Entity that assigns the identification.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      },\n      \"required\": [\n        \"identification\"\n      ]\n    },\n    \"AccountValidationCheckContext1Code\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"BENR\",\n        \"PAYM\",\n        \"RFPP\"\n      ]\n    },\n    \"ExternalClearingSystemIdentification1Code\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies the clearing system identification code, as published in an external clearing system identification code list.\\r\\nExternal code sets can be downloaded from www.iso20022.org.\"\n    },\n    \"ExternalOrganisationIdentification1Code\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies the external organisation identification scheme name code in the format of character string with a maximum length of 4 characters.\\r\\nThe list of valid codes is an external code list published separately.\\r\\nExternal code sets can be downloaded from www.iso20022.org.\"\n    },\n    \"AnyBICIdentifier\": {\n      \"type\": \"string\",\n      \"description\": \"Code allocated to a financial or non-financial institution by the ISO 9362 Registration Authority, as described in ISO 9362 \\\"Banking - Banking telecommunication messages - Business identifier code (BIC)\\\".\",\n      \"pattern\": \"^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$\"\n    },\n    \"Max70Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 70characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 70\n    },\n    \"AccountValidationResponse1Code\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"NOTC\",\n        \"NOAP\",\n        \"NMTC\",\n        \"MTCH\"\n      ]\n    },\n    \"AccountValidationResponse2Code\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"NMTC\",\n        \"MTCH\"\n      ]\n    },\n    \"AccountValidationResponse3Code\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"PASS\",\n        \"INCO\",\n        \"FAIL\"\n      ]\n    },\n    \"ValidationCheckReponse1\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"account_validation_status\": {\n          \"description\": \"Overall status of the account verification.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse3Code\"\n        },\n        \"creditor_account_match\": {\n          \"description\": \"Whether an account was found in the banks books identified by the provided creditor account identification (number) that can receive incoming funds.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse2Code\"\n        },\n        \"creditor_name_match\": {\n          \"description\": \"Result of matching the provided creditor name with the account holder name. The matching logic used must follow the same rules as the ones that would be apply when the transaction will be processed.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse1Code\"\n        },\n        \"creditor_address_match\": {\n          \"description\": \"Result of matching the provided creditor address with the account holder address. The matching logic used must follow the same rules as the ones that would be apply when the transaction will be processed.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse1Code\"\n        },\n        \"creditor_organisation_identification_match\": {\n          \"description\": \"Result of matching the provided creditor organization identification with the account holder name. The matching logic used must follow the same rules as the ones that would be apply when the transaction will be processed.\",\n          \"$ref\": \"#/definitions/AccountValidationResponse1Code\"\n        }\n      },\n      \"required\": [\n        \"account_validation_status\",\n        \"creditor_name_match\",\n        \"creditor_address_match\",\n        \"creditor_organisation_identification_match\"\n      ]\n    },\n    \"ClearingSystemMemberIdentification2\": {\n      \"type\": \"object\",\n      \"description\": \"Unique identification, as assigned by a clearing system, to unambiguously identify a member of the clearing system.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"clearing_system_identification\": {\n          \"description\": \"Specification of a pre-agreed offering between clearing agents or the channel through which the payment instruction is processed.\",\n          \"$ref\": \"#/definitions/ClearingSystemIdentification2Choice\"\n        },\n        \"member_identification\": {\n          \"description\": \"Identification of a member of a clearing system.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      },\n      \"required\": [\n        \"member_identification\"\n      ]\n    },\n    \"FinancialInstitutionIdentification20\": {\n      \"type\": \"object\",\n      \"description\": \"Set of elements used to identify a financial institution.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"bicfi\": {\n          \"description\": \"Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 \\\"Banking - Banking telecommunication messages - Business identifier code (BIC)\\\".\",\n          \"$ref\": \"#/definitions/BICFIIdentifier\"\n        },\n        \"clearing_system_member_identification\": {\n          \"description\": \"Information used to identify a member within a clearing system.\",\n          \"$ref\": \"#/definitions/ClearingSystemMemberIdentification2\"\n        }\n      }\n    },\n    \"BICFIIdentifier\": {\n      \"type\": \"string\",\n      \"description\": \"Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 \\\"Banking - Banking telecommunication messages - Business identifier code (BIC)\\\".\",\n      \"pattern\": \"^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$\"\n    },\n    \"CountryCode\": {\n      \"type\": \"string\",\n      \"description\": \"Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).\",\n      \"pattern\": \"^[A-Z]{2,2}$\"\n    },\n    \"Max140Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 140 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 140\n    },\n    \"Max35Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 35 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 35\n    },\n    \"Max16Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 16 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 16\n    },\n    \"ClearingSystemIdentification2Choice\": {\n      \"type\": \"object\",\n      \"description\": \"Choice of a clearing system identifier.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"code\": {\n          \"description\": \"Identification of a clearing system, in a coded form as published in an external list.\",\n          \"$ref\": \"#/definitions/ExternalClearingSystemIdentification1Code\"\n        },\n        \"proprietary\": {\n          \"description\": \"Identification code for a clearing system, that has not yet been identified in the list of clearing systems.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      },\n      \"maxProperties\": 1,\n      \"minProperties\": 1\n    },\n    \"Max34Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 34 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 34\n    },\n    \"OrganisationIdentification8\": {\n      \"type\": \"object\",\n      \"description\": \"Unique and unambiguous way to identify an organisation.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"any_bic\": {\n          \"description\": \"Code allocated to a financial institution or non financial institution by the ISO 9362 Registration Authority as described in ISO 9362 \\\"Banking - Banking telecommunication messages - Business identifier code (BIC)\\\".\",\n          \"$ref\": \"#/definitions/AnyBICIdentifier\"\n        },\n        \"other\": {\n          \"type\": \"array\",\n          \"description\": \"Unique identification of an organisation, as assigned by an institution, using an identification scheme.\",\n          \"items\": {\n            \"$ref\": \"#/definitions/GenericOrganisationIdentification1\"\n          }\n        }\n      }\n    },\n    \"OrganisationIdentificationSchemeName1Choice\": {\n      \"type\": \"object\",\n      \"description\": \"Sets of elements to identify a name of the organisation identification scheme.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"code\": {\n          \"description\": \"Name of the identification scheme, in a coded form as published in an external list.\",\n          \"$ref\": \"#/definitions/ExternalOrganisationIdentification1Code\"\n        },\n        \"proprietary\": {\n          \"description\": \"Name of the identification scheme, in a free text form.\",\n          \"$ref\": \"#/definitions/Max35Text\"\n        }\n      },\n      \"maxProperties\": 1,\n      \"minProperties\": 1\n    },\n    \"Max50Text\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies a character string with a maximum length of 50 characters.\",\n      \"minLength\": 1,\n      \"maxLength\": 50\n    },\n    \"ErrorCodeConsumer\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"status\"\n      ],\n      \"properties\": {\n        \"status\": {\n          \"$ref\": \"#/definitions/StatusCodeConnector\"\n        }\n      }\n    },\n    \"StatusCodeConnector\": {\n      \"required\": [\n        \"code\",\n        \"severity\",\n        \"text\"\n      ],\n      \"properties\": {\n        \"severity\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"Fatal\",\n            \"Transient\"\n          ]\n        },\n        \"code\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"SwAP001\",\n            \"SwAP002\",\n            \"SwAP003\",\n            \"SwAP005\",\n            \"SwAP006\",\n            \"SwAP007\",\n            \"SwAP008\",\n            \"SwAP010\",\n            \"SwAP009\",\n            \"SwAP011\",\n            \"SwAP099\",\n            \"SwAP090\",\n            \"SwAP501\",\n            \"SwAP504\",\n            \"SwAP506\",\n            \"SwAP507\",\n            \"SwAP521\",\n            \"SwAP522\",\n            \"SwAP590\",\n            \"SwAP591\",\n            \"SwAPProxy001\",\n            \"SwAPProxy002\",\n            \"SwAPProxy003\",\n            \"SwAPProxy004\",\n            \"SwAPProxy005\",\n            \"SwAPProxy006\",\n            \"SwAPProxy007\",\n            \"SwAPProxy008\",\n            \"CANT\",\n            \"UNAV\",\n            \"InvalidRequest\",\n            \"MandatoryFieldMissing\",\n            \"MyInstitutionAuthorizationFailure\",\n            \"FromAuthorizationFailure\",\n            \"NoResultFound\",\n            \"UnknownTransaction\",\n            \"InvalidRBACRole\",\n            \"InternalError\"\n          ]\n        },\n        \"text\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n"
		},
		{
			"id": "68d0f0b7-e0c6-4a40-a55e-b1c39c39c057",
			"key": "dn",
			"value": " \"o=cclausb0,o=swift\""
		},
		{
			"id": "ac3fe4bf-e587-4013-ad3c-cd984b1c5fca",
			"key": "bic",
			"value": "BANABEBB"
		},
		{
			"id": "e488ec47-b916-432a-bb38-1bd7f73222f5",
			"key": "consumer-key",
			"value": "<replace with 'consumer-key' from the app you created>"
		}
	],
	"protocolProfileBehavior": {}
}